<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Diagrama/Diagrama.puml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Diagrama/Diagrama.puml" />
              <option name="originalContent" value="@startuml&#10;!define interfaceStyle class&#10;&#10;' Estados do Pedido (Template Method + Singleton)&#10;abstract class PedidoEstado {&#10;    + setProximoEstadoNaCadeia(estado: PedidoEstado)&#10;    + getProximoEstadoNaCadeia(): PedidoEstado&#10;    + processar(pedido: Pedido): String&#10;    # prepararPedido(pedido: Pedido)&#10;    # processarPedido(pedido: Pedido)&#10;    # transportarPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEmProcesso {&#10;    + getInstance(): PedidoEmProcesso&#10;    # prepararPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEmPreparo {&#10;    + getInstance(): PedidoEmPreparo&#10;    # processarPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEmTransporte {&#10;    + getInstance(): PedidoEmTransporte&#10;    # transportarPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEntregue {&#10;    + getInstance(): PedidoEntregue&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;PedidoEmProcesso --|&gt; PedidoEstado&#10;PedidoEmPreparo --|&gt; PedidoEstado&#10;PedidoEmTransporte --|&gt; PedidoEstado&#10;PedidoEntregue --|&gt; PedidoEstado&#10;&#10;' Builder em Usuario, Endereco, Pedido&#10;class Usuario {&#10;    - nome: String&#10;    - endereco: Endereco&#10;    + getNome(): String&#10;    + getEndereco(): Endereco&#10;    + setEndereco(Endereco)&#10;    + clone(): Usuario&#10;    + pedir(Pedido)&#10;    + update(Observable, Object)&#10;    + Builder&#10;}&#10;class Usuario.Builder {&#10;    + setNome(String): Builder&#10;    + setEndereco(Endereco): Builder&#10;    + build(): Usuario&#10;}&#10;class Endereco {&#10;    - rua: String&#10;    - numero: String&#10;    - cidade: String&#10;    - estado: String&#10;    - cep: String&#10;    + Builder&#10;}&#10;class Endereco.Builder {&#10;    + setRua(String): Builder&#10;    + setNumero(String): Builder&#10;    + setCidade(String): Builder&#10;    + setEstado(String): Builder&#10;    + setCep(String): Builder&#10;    + build(): Endereco&#10;}&#10;class Pedido {&#10;    - processoAtual: PedidoEstado&#10;    - usuario: Usuario&#10;    - formaPagamento: FormaPagamento&#10;    - valorTotal: double&#10;    - desconto: Desconto&#10;    + calcularValor(FormaPagamento): double&#10;    + configurarCadeiaEstados()&#10;    + processarCadeiaEstados(): String&#10;    + Builder&#10;}&#10;class Pedido.Builder {&#10;    + setUsuario(Usuario): Builder&#10;    + setFormaPagamento(FormaPagamento): Builder&#10;    + setValorTotal(double): Builder&#10;    + setDesconto(Desconto): Builder&#10;    + build(): Pedido&#10;}&#10;&#10;' Decorator e Factory para Desconto&#10;interface Desconto {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;abstract class DescontoDecorator {&#10;    - wrappee: Desconto&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class CupomDesconto10 {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class CupomDesconto15 {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class CupomDesconto20 {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class SemDesconto {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;DescontoDecorator ..|&gt; Desconto&#10;CupomDesconto10 ..|&gt; Desconto&#10;CupomDesconto15 ..|&gt; Desconto&#10;CupomDesconto20 ..|&gt; Desconto&#10;SemDesconto ..|&gt; Desconto&#10;&#10;class DescontoFactory {&#10;    + criarDesconto(String): Desconto&#10;    + registrarDesconto(String, Supplier&lt;Desconto&gt;)&#10;}&#10;&#10;' Forma de Pagamento&#10;interface FormaPagamento {&#10;    + getTaxa(): double&#10;}&#10;class FormaCartaoCredito {&#10;    + getTaxa(): double&#10;}&#10;class FormaCartaoDebito {&#10;    + getTaxa(): double&#10;}&#10;class FormaPix {&#10;    + getTaxa(): double&#10;}&#10;FormaCartaoCredito ..|&gt; FormaPagamento&#10;FormaCartaoDebito ..|&gt; FormaPagamento&#10;FormaPix ..|&gt; FormaPagamento&#10;&#10;' Relacionamentos principais&#10;Pedido --&gt; Usuario&#10;Pedido --&gt; Endereco&#10;Pedido --&gt; FormaPagamento&#10;Pedido --&gt; Desconto&#10;Pedido *-- PedidoEstado&#10;PedidoEstado --&gt; PedidoEstado : proximoEstadoNaCadeia&#10;&#10;java.util.Observable &lt;|-- Pedido&#10;&#10;java.util.Observer &lt;|-- Usuario&#10;&#10;@enduml" />
              <option name="updatedContent" value="@startuml&#10;!define interfaceStyle class&#10;&#10;' Estados do Pedido (Template Method + Singleton)&#10;abstract class PedidoEstado {&#10;    + setProximoEstadoNaCadeia(estado: PedidoEstado)&#10;    + getProximoEstadoNaCadeia(): PedidoEstado&#10;    + processar(pedido: Pedido): String&#10;    # prepararPedido(pedido: Pedido)&#10;    # processarPedido(pedido: Pedido)&#10;    # transportarPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEmProcesso {&#10;    + getInstance(): PedidoEmProcesso&#10;    # prepararPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEmPreparo {&#10;    + getInstance(): PedidoEmPreparo&#10;    # processarPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEmTransporte {&#10;    + getInstance(): PedidoEmTransporte&#10;    # transportarPedido(pedido: Pedido)&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;class PedidoEntregue {&#10;    + getInstance(): PedidoEntregue&#10;    # finalizarPedido(pedido: Pedido): String&#10;}&#10;PedidoEmProcesso --|&gt; PedidoEstado&#10;PedidoEmPreparo --|&gt; PedidoEstado&#10;PedidoEmTransporte --|&gt; PedidoEstado&#10;PedidoEntregue --|&gt; PedidoEstado&#10;&#10;' Builder em Usuario, Endereco, Pedido&#10;class Usuario {&#10;    - nome: String&#10;    - endereco: Endereco&#10;    + getNome(): String&#10;    + getEndereco(): Endereco&#10;    + setEndereco(Endereco)&#10;    + clone(): Usuario&#10;    + pedir(Pedido)&#10;    + update(Observable, Object)&#10;}&#10;class Usuario_Builder {&#10;    + setNome(String): Usuario_Builder&#10;    + setEndereco(Endereco): Usuario_Builder&#10;    + build(): Usuario&#10;}&#10;class Endereco {&#10;    - rua: String&#10;    - numero: String&#10;    - cidade: String&#10;    - estado: String&#10;    - cep: String&#10;}&#10;class Endereco_Builder {&#10;    + setRua(String): Endereco_Builder&#10;    + setNumero(String): Endereco_Builder&#10;    + setCidade(String): Endereco_Builder&#10;    + setEstado(String): Endereco_Builder&#10;    + setCep(String): Endereco_Builder&#10;    + build(): Endereco&#10;}&#10;class Pedido {&#10;    - processoAtual: PedidoEstado&#10;    - usuario: Usuario&#10;    - formaPagamento: FormaPagamento&#10;    - valorTotal: double&#10;    - desconto: Desconto&#10;    + calcularValor(FormaPagamento): double&#10;    + configurarCadeiaEstados()&#10;    + processarCadeiaEstados(): String&#10;    + Builder&#10;}&#10;class Pedido.Builder {&#10;    + setUsuario(Usuario): Builder&#10;    + setFormaPagamento(FormaPagamento): Builder&#10;    + setValorTotal(double): Builder&#10;    + setDesconto(Desconto): Builder&#10;    + build(): Pedido&#10;}&#10;&#10;' Decorator e Factory para Desconto&#10;interface Desconto {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;abstract class DescontoDecorator {&#10;    - wrappee: Desconto&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class CupomDesconto10 {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class CupomDesconto15 {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class CupomDesconto20 {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;class SemDesconto {&#10;    + aplicarDesconto(valor: double): double&#10;}&#10;DescontoDecorator ..|&gt; Desconto&#10;CupomDesconto10 ..|&gt; Desconto&#10;CupomDesconto15 ..|&gt; Desconto&#10;CupomDesconto20 ..|&gt; Desconto&#10;SemDesconto ..|&gt; Desconto&#10;&#10;class DescontoFactory {&#10;    + criarDesconto(String): Desconto&#10;    + registrarDesconto(String, Supplier&lt;Desconto&gt;)&#10;}&#10;&#10;' Forma de Pagamento&#10;interface FormaPagamento {&#10;    + getTaxa(): double&#10;}&#10;class FormaCartaoCredito {&#10;    + getTaxa(): double&#10;}&#10;class FormaCartaoDebito {&#10;    + getTaxa(): double&#10;}&#10;class FormaPix {&#10;    + getTaxa(): double&#10;}&#10;FormaCartaoCredito ..|&gt; FormaPagamento&#10;FormaCartaoDebito ..|&gt; FormaPagamento&#10;FormaPix ..|&gt; FormaPagamento&#10;&#10;' Relacionamentos principais&#10;Pedido --&gt; Usuario&#10;Pedido --&gt; Endereco&#10;Pedido --&gt; FormaPagamento&#10;Pedido --&gt; Desconto&#10;Pedido *-- PedidoEstado&#10;PedidoEstado --&gt; PedidoEstado : proximoEstadoNaCadeia&#10;&#10;java.util.Observable &lt;|-- Pedido&#10;&#10;java.util.Observer &lt;|-- Usuario&#10;&#10;@enduml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/DescontoBase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/DescontoBase.java" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class DescontoBase implements Desconto {&#10;    @Override&#10;    public double aplicarDesconto(double valor) {&#10;        return valor;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/DescontoFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/DescontoFactory.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class DescontoFactory {&#10;    public static Desconto criarDesconto(TipoDesconto tipo) {&#10;        return tipo.criar();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class DescontoFactory {&#10;    public static Desconto criarDesconto(TipoDesconto tipo) {&#10;        return tipo.criar();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/DescontoFixo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/DescontoFixo.java" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class DescontoFixo extends DescontoDecorator {&#10;    private double valorFixo;&#10;&#10;    public DescontoFixo(Desconto desconto, double valorFixo) {&#10;        super(desconto);&#10;        this.valorFixo = valorFixo;&#10;    }&#10;&#10;    @Override&#10;    public double aplicarDesconto(double valor) {&#10;        double valorComDesconto = desconto.aplicarDesconto(valor) - valorFixo;&#10;        return Math.max(0, valorComDesconto);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Endereco.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Endereco.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class Endereco implements Cloneable {&#10;    private String rua;&#10;    private String numero;&#10;    private String cidade;&#10;    private String estado;&#10;    private String cep;&#10;&#10;    public Endereco(String rua, String numero, String cidade, String estado, String cep) {&#10;        this.rua = rua;&#10;        this.numero = numero;&#10;        this.cidade = cidade;&#10;        this.estado = estado;&#10;        this.cep = cep;&#10;    }&#10;&#10;    public String getRua() { return rua; }&#10;    public void setRua(String rua) { this.rua = rua; }&#10;    public String getNumero() { return numero; }&#10;    public void setNumero(String numero) { this.numero = numero; }&#10;    public String getCidade() { return cidade; }&#10;    public void setCidade(String cidade) { this.cidade = cidade; }&#10;    public String getEstado() { return estado; }&#10;    public void setEstado(String estado) { this.estado = estado; }&#10;    public String getCep() { return cep; }&#10;    public void setCep(String cep) { this.cep = cep; }&#10;&#10;    @Override&#10;    public Endereco clone() {&#10;        try {&#10;            return (Endereco) super.clone();&#10;        } catch (CloneNotSupportedException e) {&#10;            throw new AssertionError();&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class Endereco implements Cloneable {&#10;    private String rua;&#10;    private String numero;&#10;    private String cidade;&#10;    private String estado;&#10;    private String cep;&#10;&#10;    private Endereco(Builder builder) {&#10;        this.rua = builder.rua;&#10;        this.numero = builder.numero;&#10;        this.cidade = builder.cidade;&#10;        this.estado = builder.estado;&#10;        this.cep = builder.cep;&#10;    }&#10;&#10;    public static class Builder {&#10;        private String rua;&#10;        private String numero;&#10;        private String cidade;&#10;        private String estado;&#10;        private String cep;&#10;&#10;        public Builder setRua(String rua) { this.rua = rua; return this; }&#10;        public Builder setNumero(String numero) { this.numero = numero; return this; }&#10;        public Builder setCidade(String cidade) { this.cidade = cidade; return this; }&#10;        public Builder setEstado(String estado) { this.estado = estado; return this; }&#10;        public Builder setCep(String cep) { this.cep = cep; return this; }&#10;        public Endereco build() { return new Endereco(this); }&#10;    }&#10;&#10;    public String getRua() { return rua; }&#10;    public void setRua(String rua) { this.rua = rua; }&#10;    public String getNumero() { return numero; }&#10;    public void setNumero(String numero) { this.numero = numero; }&#10;    public String getCidade() { return cidade; }&#10;    public void setCidade(String cidade) { this.cidade = cidade; }&#10;    public String getEstado() { return estado; }&#10;    public void setEstado(String estado) { this.estado = estado; }&#10;    public String getCep() { return cep; }&#10;    public void setCep(String cep) { this.cep = cep; }&#10;&#10;    @Override&#10;    public Endereco clone() {&#10;        try {&#10;            return (Endereco) super.clone();&#10;        } catch (CloneNotSupportedException e) {&#10;            throw new AssertionError();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Pedido.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Pedido.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import java.util.Observable;&#10;&#10;public class Pedido extends Observable {&#10;    private PedidoEstado processoAtual;&#10;    private Usuario usuario;&#10;    private FormaPagamento formaPagamento;&#10;    private String mensagem;&#10;    private double valorTotal;&#10;    private Desconto desconto;&#10;&#10;    private Pedido(Builder builder) {&#10;        this.usuario = builder.usuario;&#10;        this.formaPagamento = builder.formaPagamento;&#10;        this.valorTotal = builder.valorTotal;&#10;        this.mensagem = builder.mensagem;&#10;        this.desconto = builder.desconto;&#10;        this.processoAtual = PedidoEmProcesso.getInstance();&#10;    }&#10;&#10;    public static class Builder {&#10;        private Usuario usuario;&#10;        private FormaPagamento formaPagamento;&#10;        private double valorTotal;&#10;        private String mensagem;&#10;        private Desconto desconto;&#10;&#10;        public Builder setUsuario(Usuario usuario) {&#10;            this.usuario = usuario;&#10;            return this;&#10;        }&#10;        public Builder setFormaPagamento(FormaPagamento formaPagamento) {&#10;            this.formaPagamento = formaPagamento;&#10;            return this;&#10;        }&#10;        public Builder setValorTotal(double valorTotal) {&#10;            this.valorTotal = valorTotal;&#10;            return this;&#10;        }&#10;        public Builder setMensagem(String mensagem) {&#10;            this.mensagem = mensagem;&#10;            return this;&#10;        }&#10;        public Builder setDesconto(Desconto desconto) {&#10;            this.desconto = desconto;&#10;            return this;&#10;        }&#10;        public Pedido build() {&#10;            return new Pedido(this);&#10;        }&#10;    }&#10;&#10;    public PedidoEstado getProcessoAtual() {&#10;        return processoAtual;&#10;    }&#10;    public void setProcessoAtual(PedidoEstado processoAtual) {&#10;        this.processoAtual = processoAtual;&#10;    }&#10;    public void updateEstado(){&#10;        setChanged();&#10;        notifyObservers();&#10;    }&#10;    public double pagamento(double valorTotal){&#10;        return valorTotal * formaPagamento.getTaxa();&#10;    }&#10;    public String getMensagem() {&#10;        return mensagem;&#10;    }&#10;    public void setMensagem(String mensagem) {&#10;        this.mensagem = mensagem;&#10;    }&#10;    @Override&#10;    public String toString() {&#10;        return mensagem;&#10;    }&#10;    public Usuario getUsuario() {&#10;        return usuario;&#10;    }&#10;    public FormaPagamento getFormaPagamento() {&#10;        return formaPagamento;&#10;    }&#10;    public double getValorTotal() {&#10;        return valorTotal;&#10;    }&#10;    public Desconto getDesconto() {&#10;        return desconto;&#10;    }&#10;&#10;    public void configurarCadeiaEstados() {&#10;        PedidoEmProcesso.getInstance().setProximoEstadoNaCadeia(PedidoEmPreparo.getInstance());&#10;        PedidoEmPreparo.getInstance().setProximoEstadoNaCadeia(PedidoEmTransporte.getInstance());&#10;        PedidoEmTransporte.getInstance().setProximoEstadoNaCadeia(PedidoEntregue.getInstance());&#10;    }&#10;&#10;    public String processarCadeiaEstados() {&#10;        PedidoEstado estado = PedidoEmProcesso.getInstance();&#10;        String resultado = null;&#10;        while (estado != null) {&#10;            resultado = estado.processar(this);&#10;            estado = estado.getProximoEstadoNaCadeia();&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    public double calcularValor(FormaPagamento formaPagamento) {&#10;        double valorComDesconto = desconto != null ? desconto.aplicarDesconto(valorTotal) : valorTotal;&#10;        return valorComDesconto + (valorComDesconto * formaPagamento.getTaxa());&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import java.util.Observable;&#10;&#10;public class Pedido extends Observable {&#10;    private PedidoEstado processoAtual;&#10;    private Usuario usuario;&#10;    private FormaPagamento formaPagamento;&#10;    private String mensagem;&#10;    private double valorTotal;&#10;    private Desconto desconto;&#10;&#10;    private Pedido(Builder builder) {&#10;        this.usuario = builder.usuario;&#10;        this.formaPagamento = builder.formaPagamento;&#10;        this.valorTotal = builder.valorTotal;&#10;        this.mensagem = builder.mensagem;&#10;        this.desconto = builder.desconto;&#10;        this.processoAtual = PedidoEmProcesso.getInstance();&#10;    }&#10;&#10;    public static class Builder {&#10;        private Usuario usuario;&#10;        private FormaPagamento formaPagamento;&#10;        private double valorTotal;&#10;        private String mensagem;&#10;        private Desconto desconto;&#10;&#10;        public Builder setUsuario(Usuario usuario) {&#10;            this.usuario = usuario;&#10;            return this;&#10;        }&#10;        public Builder setFormaPagamento(FormaPagamento formaPagamento) {&#10;            this.formaPagamento = formaPagamento;&#10;            return this;&#10;        }&#10;        public Builder setValorTotal(double valorTotal) {&#10;            this.valorTotal = valorTotal;&#10;            return this;&#10;        }&#10;        public Builder setMensagem(String mensagem) {&#10;            this.mensagem = mensagem;&#10;            return this;&#10;        }&#10;        public Builder setDesconto(Desconto desconto) {&#10;            this.desconto = desconto;&#10;            return this;&#10;        }&#10;        public Pedido build() {&#10;            return new Pedido(this);&#10;        }&#10;    }&#10;&#10;    public PedidoEstado getProcessoAtual() {&#10;        return processoAtual;&#10;    }&#10;    public void setProcessoAtual(PedidoEstado processoAtual) {&#10;        this.processoAtual = processoAtual;&#10;    }&#10;    public void updateEstado(){&#10;        setChanged();&#10;        notifyObservers();&#10;    }&#10;    public double pagamento(double valorTotal){&#10;        return valorTotal * formaPagamento.getTaxa();&#10;    }&#10;    public String getMensagem() {&#10;        return mensagem;&#10;    }&#10;    public void setMensagem(String mensagem) {&#10;        this.mensagem = mensagem;&#10;    }&#10;    @Override&#10;    public String toString() {&#10;        return mensagem;&#10;    }&#10;    public Usuario getUsuario() {&#10;        return usuario;&#10;    }&#10;    public FormaPagamento getFormaPagamento() {&#10;        return formaPagamento;&#10;    }&#10;    public double getValorTotal() {&#10;        return valorTotal;&#10;    }&#10;    public Desconto getDesconto() {&#10;        return desconto;&#10;    }&#10;&#10;    public void configurarCadeiaEstados() {&#10;        PedidoEmProcesso.getInstance().setProximoEstadoNaCadeia(PedidoEmPreparo.getInstance());&#10;        PedidoEmPreparo.getInstance().setProximoEstadoNaCadeia(PedidoEmTransporte.getInstance());&#10;        PedidoEmTransporte.getInstance().setProximoEstadoNaCadeia(PedidoEntregue.getInstance());&#10;    }&#10;&#10;    public String processarCadeiaEstados() {&#10;        PedidoEstado estado = PedidoEmProcesso.getInstance();&#10;        String resultado = null;&#10;        while (estado != null) {&#10;            resultado = estado.processar(this);&#10;            estado = estado.getProximoEstadoNaCadeia();&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    public double calcularValor(FormaPagamento formaPagamento) {&#10;        double valorComDesconto;&#10;        if (desconto != null) {&#10;            valorComDesconto = desconto.aplicarDesconto(valorTotal);&#10;        } else {&#10;            valorComDesconto = valorTotal;&#10;        }&#10;        return valorComDesconto + (valorComDesconto * formaPagamento.getTaxa());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/PedidoEmPreparo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/PedidoEmPreparo.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class PedidoEmPreparo extends PedidoEstado {&#10;    private PedidoEmPreparo() {}&#10;    private static PedidoEmPreparo instance = new PedidoEmPreparo();&#10;    public static PedidoEmPreparo getInstance() {&#10;        return instance;&#10;    }&#10;    @Override&#10;    protected void processarPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Restaurante preparando o pedido.&quot;);&#10;    }&#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        return processarProximo(pedido);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class PedidoEmPreparo extends PedidoEstado {&#10;    private PedidoEmPreparo() {}&#10;    private static PedidoEmPreparo instance = new PedidoEmPreparo();&#10;    public static PedidoEmPreparo getInstance() {&#10;        return instance;&#10;    }&#10;    @Override&#10;    protected void processarPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Restaurante preparando o pedido.&quot;);&#10;    }&#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        if (proximoEstadoNaCadeia != null) {&#10;            return proximoEstadoNaCadeia.processar(pedido);&#10;        }&#10;        return &quot;Pedido entregue ou cancelado.&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/PedidoEmProcesso.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/PedidoEmProcesso.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class PedidoEmProcesso extends PedidoEstado {&#10;    private PedidoEmProcesso() {}&#10;    private static PedidoEmProcesso instance = new PedidoEmProcesso();&#10;    public static PedidoEmProcesso getInstance() {&#10;        return instance;&#10;    }&#10;    &#10;    @Override&#10;    protected void prepararPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Restaurante aceitou o pedido.&quot;);&#10;    }&#10;    &#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        return processarProximo(pedido);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class PedidoEmProcesso extends PedidoEstado {&#10;    private PedidoEmProcesso() {}&#10;    private static PedidoEmProcesso instance = new PedidoEmProcesso();&#10;    public static PedidoEmProcesso getInstance() {&#10;        return instance;&#10;    }&#10;    &#10;    @Override&#10;    protected void prepararPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Restaurante aceitou o pedido.&quot;);&#10;    }&#10;    &#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        if (proximoEstadoNaCadeia != null) {&#10;            return proximoEstadoNaCadeia.processar(pedido);&#10;        }&#10;        return &quot;Pedido entregue ou cancelado.&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/PedidoEmTransporte.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/PedidoEmTransporte.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class PedidoEmTransporte extends PedidoEstado {&#10;&#10;    private PedidoEmTransporte() {}&#10;    private static PedidoEmTransporte instance = new PedidoEmTransporte();&#10;    public static PedidoEmTransporte getInstance() {&#10;        return instance;&#10;    }&#10;&#10;    @Override&#10;    protected void transportarPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Restaurante transportando o pedido.&quot;);&#10;    }&#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        return processarProximo(pedido);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class PedidoEmTransporte extends PedidoEstado {&#10;&#10;    private PedidoEmTransporte() {}&#10;    private static PedidoEmTransporte instance = new PedidoEmTransporte();&#10;    public static PedidoEmTransporte getInstance() {&#10;        return instance;&#10;    }&#10;&#10;    @Override&#10;    protected void transportarPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Restaurante transportando o pedido.&quot;);&#10;    }&#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        if (proximoEstadoNaCadeia != null) {&#10;            return proximoEstadoNaCadeia.processar(pedido);&#10;        }&#10;        return &quot;Pedido entregue ou cancelado.&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/PedidoEntregue.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/PedidoEntregue.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class PedidoEntregue extends PedidoEstado {&#10;&#10;    private PedidoEntregue() {};&#10;    private static PedidoEntregue instance = new PedidoEntregue();&#10;    public static PedidoEntregue getInstance(){&#10;        return instance;&#10;    }&#10;&#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Pedido entregue ao cliente.&quot;);&#10;        return pedido.getMensagem();&#10;    }&#10;    @Override&#10;    public String processar(Pedido pedido) {&#10;        return super.processar(pedido);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public class PedidoEntregue extends PedidoEstado {&#10;    private PedidoEntregue() {}&#10;    private static PedidoEntregue instance = new PedidoEntregue();&#10;    public static PedidoEntregue getInstance() {&#10;        return instance;&#10;    }&#10;    @Override&#10;    protected String finalizarPedido(Pedido pedido) {&#10;        pedido.setMensagem(&quot;Pedido entregue ao cliente.&quot;);&#10;        return pedido.getMensagem();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/PedidoEstado.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/PedidoEstado.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public abstract class PedidoEstado {&#10;&#10;    protected PedidoEstado proximoEstadoNaCadeia;&#10;&#10;    public void setProximoEstadoNaCadeia(PedidoEstado proximo) {&#10;        this.proximoEstadoNaCadeia = proximo;&#10;    }&#10;&#10;    public abstract String processar(Pedido pedido);&#10;&#10;    protected String processarProximo(Pedido pedido) {&#10;        if (proximoEstadoNaCadeia != null) {&#10;            return proximoEstadoNaCadeia.processar(pedido);&#10;        }&#10;        return &quot;Pedido entregue ou cancelado.&quot;;&#10;    }&#10;&#10;    public Boolean processar(){&#10;        return false;&#10;    }&#10;&#10;    public Boolean preparar(){&#10;        return false;&#10;    }&#10;&#10;    public Boolean transportar(){&#10;        return false;&#10;    }&#10;&#10;    public Boolean entregue(){&#10;        return false;&#10;    }&#10;&#10;    public PedidoEstado getProximoEstadoNaCadeia() {&#10;        return proximoEstadoNaCadeia;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public abstract class PedidoEstado {&#10;&#10;    protected PedidoEstado proximoEstadoNaCadeia;&#10;&#10;    public void setProximoEstadoNaCadeia(PedidoEstado proximo) {&#10;        this.proximoEstadoNaCadeia = proximo;&#10;    }&#10;&#10;    public final String processar(Pedido pedido) {&#10;        prepararPedido(pedido);&#10;        processarPedido(pedido);&#10;        transportarPedido(pedido);&#10;        return finalizarPedido(pedido);&#10;    }&#10;&#10;    protected void prepararPedido(Pedido pedido) {}&#10;    protected void processarPedido(Pedido pedido) {}&#10;    protected void transportarPedido(Pedido pedido) {}&#10;    protected String finalizarPedido(Pedido pedido) { return &quot;Pedido entregue ou cancelado.&quot;; }&#10;&#10;    public Boolean processar(){&#10;        return false;&#10;    }&#10;&#10;    public Boolean preparar(){&#10;        return false;&#10;    }&#10;&#10;    public Boolean transportar(){&#10;        return false;&#10;    }&#10;&#10;    public Boolean entregue(){&#10;        return false;&#10;    }&#10;&#10;    public PedidoEstado getProximoEstadoNaCadeia() {&#10;        return proximoEstadoNaCadeia;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/TipoDesconto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/TipoDesconto.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public enum TipoDesconto {&#10;    CUPOM_10,&#10;    CUPOM_15,&#10;    CUPOM_20&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;public enum TipoDesconto {&#10;    CUPOM10 {&#10;        public Desconto criar() { return new CupomDesconto10(); }&#10;    },&#10;    CUPOM15 {&#10;        public Desconto criar() { return new CupomDesconto15(); }&#10;    },&#10;    CUPOM20 {&#10;        public Desconto criar() { return new CupomDesconto20(); }&#10;    },&#10;    NENHUM {&#10;        public Desconto criar() { return new DescontoSemDesconto(); }&#10;    };&#10;    public abstract Desconto criar();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Usuario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Usuario.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import java.util.Observable;&#10;import java.util.Observer;&#10;&#10;public class Usuario implements Observer, Cloneable {&#10;&#10;    private String nome;&#10;    private String ultimaNotificacao;&#10;    private Endereco endereco;&#10;&#10;    public Usuario(String nome){&#10;        this.nome = nome;&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;&#10;    public String getUltimaNotificacao() {&#10;        return ultimaNotificacao;&#10;    }&#10;&#10;    public Endereco getEndereco() {&#10;        return endereco;&#10;    }&#10;&#10;    public void setEndereco(Endereco endereco) {&#10;        this.endereco = endereco;&#10;    }&#10;&#10;    public void pedir(Pedido pedido){&#10;        pedido.addObserver(this);&#10;    }&#10;&#10;    public void update(Observable pedido, Object arg1){&#10;        this.ultimaNotificacao = pedido.toString();&#10;    }&#10;&#10;    @Override&#10;    public Usuario clone() {&#10;        try {&#10;            Usuario clone = (Usuario) super.clone();&#10;            clone.endereco = this.endereco != null ? this.endereco.clone() : null;&#10;            return clone;&#10;        } catch (CloneNotSupportedException e) {&#10;            throw new AssertionError();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import java.util.Observable;&#10;import java.util.Observer;&#10;&#10;public class Usuario implements Observer, Cloneable {&#10;    private String nome;&#10;    private String ultimaNotificacao;&#10;    private Endereco endereco;&#10;&#10;    private Usuario(Builder builder) {&#10;        this.nome = builder.nome;&#10;        this.endereco = builder.endereco;&#10;    }&#10;&#10;    public static class Builder {&#10;        private String nome;&#10;        private Endereco endereco;&#10;&#10;        public Builder setNome(String nome) {&#10;            this.nome = nome;&#10;            return this;&#10;        }&#10;        public Builder setEndereco(Endereco endereco) {&#10;            this.endereco = endereco;&#10;            return this;&#10;        }&#10;        public Usuario build() {&#10;            return new Usuario(this);&#10;        }&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;    public String getUltimaNotificacao() {&#10;        return ultimaNotificacao;&#10;    }&#10;    public Endereco getEndereco() {&#10;        return endereco;&#10;    }&#10;    public void setEndereco(Endereco endereco) {&#10;        this.endereco = endereco;&#10;    }&#10;    public void pedir(Pedido pedido){&#10;        pedido.addObserver(this);&#10;    }&#10;    public void update(Observable pedido, Object arg1){&#10;        this.ultimaNotificacao = pedido.toString();&#10;    }&#10;    @Override&#10;    public Usuario clone() {&#10;        try {&#10;            Usuario clone = (Usuario) super.clone();&#10;            clone.endereco = this.endereco != null ? this.endereco.clone() : null;&#10;            return clone;&#10;        } catch (CloneNotSupportedException e) {&#10;            throw new AssertionError();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/DescontoTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/DescontoTest.java" />
              <option name="originalContent" value="import org.example.*;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class DescontoTest {&#10;    @Test&#10;    public void testCupomDesconto10() {&#10;        Desconto desconto = DescontoFactory.criarDesconto(TipoDesconto.CUPOM10);&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(90.0, valorComDesconto, 0.01);&#10;    }&#10;&#10;    @Test&#10;    public void testCupomDesconto15() {&#10;        Desconto desconto = DescontoFactory.criarDesconto(TipoDesconto.CUPOM15);&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(85.0, valorComDesconto, 0.01);&#10;    }&#10;&#10;    @Test&#10;    public void testCupomDesconto20() {&#10;        Desconto desconto = DescontoFactory.criarDesconto(TipoDesconto.CUPOM_20);&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(80.0, valorComDesconto, 0.01);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import org.example.*;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class DescontoTest {&#10;    @Test&#10;    public void testCupomDesconto10() {&#10;        Desconto desconto = DescontoFactory.criarDesconto(TipoDesconto.CUPOM10);&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(90.0, valorComDesconto, 0.01);&#10;    }&#10;&#10;    @Test&#10;    public void testCupomDesconto15() {&#10;        Desconto desconto = DescontoFactory.criarDesconto(TipoDesconto.CUPOM15);&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(85.0, valorComDesconto, 0.01);&#10;    }&#10;&#10;    @Test&#10;    public void testCupomDesconto20() {&#10;        Desconto desconto = DescontoFactory.criarDesconto(TipoDesconto.CUPOM20);&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(80.0, valorComDesconto, 0.01);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/PedidoEstadoTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/PedidoEstadoTest.java" />
              <option name="originalContent" value="import org.example.*;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class PedidoEstadoTest {&#10;    Usuario usuario;&#10;    Pedido pedido;&#10;    String resultado;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuario = new Usuario(&quot;João&quot;);&#10;        pedido = new Pedido(usuario);&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEmProcesso() {&#10;        resultado = PedidoEmProcesso.getInstance().processar(pedido);&#10;        assertEquals(&quot;Restaurante aceitou o pedido.&quot;, pedido.getMensagem());&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEmPreparo() {&#10;        resultado = PedidoEmPreparo.getInstance().processar(pedido);&#10;        assertEquals(&quot;Restaurante preparando o pedido.&quot;, pedido.getMensagem());&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEmTransporte() {&#10;        resultado = PedidoEmTransporte.getInstance().processar(pedido);&#10;        assertEquals(&quot;Restaurante transportando o pedido.&quot;, pedido.getMensagem());&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEntregue() {&#10;        resultado = PedidoEntregue.getInstance().processar(pedido);&#10;        assertEquals(&quot;Pedido entregue ao cliente.&quot;, pedido.getMensagem());&#10;    }&#10;}" />
              <option name="updatedContent" value="import org.example.*;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class PedidoEstadoTest {&#10;    Usuario usuario;&#10;    Pedido pedido;&#10;    String resultado;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuario = new Usuario.Builder().setNome(&quot;João&quot;).build();&#10;        pedido = new Pedido.Builder().setUsuario(usuario).build();&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEmProcesso() {&#10;        resultado = PedidoEmProcesso.getInstance().processar(pedido);&#10;        assertEquals(&quot;Restaurante aceitou o pedido.&quot;, pedido.getMensagem());&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEmPreparo() {&#10;        resultado = PedidoEmPreparo.getInstance().processar(pedido);&#10;        assertEquals(&quot;Restaurante preparando o pedido.&quot;, pedido.getMensagem());&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEmTransporte() {&#10;        resultado = PedidoEmTransporte.getInstance().processar(pedido);&#10;        assertEquals(&quot;Restaurante transportando o pedido.&quot;, pedido.getMensagem());&#10;    }&#10;&#10;    @Test&#10;    void testPedidoEntregue() {&#10;        resultado = PedidoEntregue.getInstance().processar(pedido);&#10;        assertEquals(&quot;Pedido entregue ao cliente.&quot;, pedido.getMensagem());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/PedidoTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/PedidoTest.java" />
              <option name="originalContent" value="import org.example.*;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class PedidoTest {&#10;    Usuario usuario;&#10;    Pedido pedido;&#10;    FormaPagamento forma;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuario = new Usuario.Builder().setNome(&quot;Maria&quot;).build();&#10;        pedido = new Pedido.Builder().setUsuario(usuario).setValorTotal(100.0).build();&#10;        PedidoEmProcesso.getInstance().setProximoEstadoNaCadeia(PedidoEmPreparo.getInstance());&#10;        PedidoEmPreparo.getInstance().setProximoEstadoNaCadeia(PedidoEmTransporte.getInstance());&#10;        PedidoEmTransporte.getInstance().setProximoEstadoNaCadeia(PedidoEntregue.getInstance());&#10;    }&#10;&#10;    @Test&#10;    void testValorComTaxaCartaoCredito() {&#10;        forma = new FormaCartaoCredito();&#10;        double valorFinal = pedido.calcularValorComTaxa(forma);&#10;        assertEquals(105.0, valorFinal, 0.001);&#10;    }&#10;&#10;    @Test&#10;    void testValorComTaxaCartaoDebito() {&#10;        forma = new FormaCartaoDebito();&#10;        double valorFinal = pedido.calcularValorComTaxa(forma);&#10;        assertEquals(102.0, valorFinal, 0.001);&#10;    }&#10;&#10;    @Test&#10;    void testValorComTaxaPix() {&#10;        forma = new FormaPix();&#10;        double valorFinal = pedido.calcularValorComTaxa(forma);&#10;        assertEquals(101.0, valorFinal, 0.001);&#10;    }&#10;&#10;    @Test&#10;    void testCadeiaEstadoPedido() {&#10;        pedido.configurarCadeiaEstados();&#10;        String resultado = pedido.processarCadeiaEstados();&#10;        assertEquals(&quot;Pedido entregue ao cliente.&quot;, resultado);&#10;    }&#10;}" />
              <option name="updatedContent" value="import org.example.*;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class PedidoTest {&#10;    Usuario usuario;&#10;    Pedido pedido;&#10;    FormaPagamento forma;&#10;    Desconto desconto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuario = new Usuario.Builder().setNome(&quot;Maria&quot;).build();&#10;        desconto = new CupomDesconto10();&#10;        pedido = new Pedido.Builder().setUsuario(usuario).setValorTotal(100.0).setDesconto(desconto).build();&#10;        PedidoEmProcesso.getInstance().setProximoEstadoNaCadeia(PedidoEmPreparo.getInstance());&#10;        PedidoEmPreparo.getInstance().setProximoEstadoNaCadeia(PedidoEmTransporte.getInstance());&#10;        PedidoEmTransporte.getInstance().setProximoEstadoNaCadeia(PedidoEntregue.getInstance());&#10;    }&#10;&#10;    @Test&#10;    void testValorComTaxaCartaoCredito() {&#10;        forma = new FormaCartaoCredito();&#10;        double valorFinal = pedido.calcularValorComTaxa(forma);&#10;        assertEquals(94.5, valorFinal, 0.001);&#10;    }&#10;&#10;    @Test&#10;    void testValorComTaxaCartaoDebito() {&#10;        forma = new FormaCartaoDebito();&#10;        double valorFinal = pedido.calcularValorComTaxa(forma);&#10;        assertEquals(91.8, valorFinal, 0.001);&#10;    }&#10;&#10;    @Test&#10;    void testValorComTaxaPix() {&#10;        forma = new FormaPix();&#10;        double valorFinal = pedido.calcularValorComTaxa(forma);&#10;        assertEquals(90.9, valorFinal, 0.001);&#10;    }&#10;&#10;    @Test&#10;    void testCadeiaEstadoPedido() {&#10;        pedido.configurarCadeiaEstados();&#10;        String resultado = pedido.processarCadeiaEstados();&#10;        assertEquals(&quot;Pedido entregue ao cliente.&quot;, resultado);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/UsuarioTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/UsuarioTest.java" />
              <option name="originalContent" value="import org.example.Endereco;&#10;import org.example.Usuario;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class UsuarioTest {&#10;    @Test&#10;    public void testCloneSuccess() {&#10;        Endereco endereco = new Endereco(&quot;Rua A&quot;, &quot;123&quot;, &quot;CidadeX&quot;, &quot;EstadoY&quot;, &quot;00000-000&quot;);&#10;        Usuario usuarioOriginal = new Usuario(&quot;João&quot;);&#10;        usuarioOriginal.setEndereco(endereco);&#10;        Usuario usuarioClonado = usuarioOriginal.clone();&#10;&#10;        assertNotSame(usuarioOriginal, usuarioClonado);&#10;        assertEquals(usuarioOriginal.getNome(), usuarioClonado.getNome());&#10;        assertNotSame(usuarioOriginal.getEndereco(), usuarioClonado.getEndereco());&#10;        assertEquals(usuarioOriginal.getEndereco().getRua(), usuarioClonado.getEndereco().getRua());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import org.example.Endereco;&#10;import org.example.Usuario;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class UsuarioTest {&#10;    @Test&#10;    public void testCloneSuccess() {&#10;        Endereco endereco = new Endereco.Builder()&#10;            .setRua(&quot;Rua A&quot;)&#10;            .setNumero(&quot;123&quot;)&#10;            .setCidade(&quot;CidadeX&quot;)&#10;            .setEstado(&quot;EstadoY&quot;)&#10;            .setCep(&quot;00000-000&quot;)&#10;            .build();&#10;        Usuario usuarioOriginal = new Usuario.Builder()&#10;            .setNome(&quot;João&quot;)&#10;            .setEndereco(endereco)&#10;            .build();&#10;        Usuario usuarioClonado = usuarioOriginal.clone();&#10;&#10;        assertNotSame(usuarioOriginal, usuarioClonado);&#10;        assertEquals(usuarioOriginal.getNome(), usuarioClonado.getNome());&#10;        assertNotSame(usuarioOriginal.getEndereco(), usuarioClonado.getEndereco());&#10;        assertEquals(usuarioOriginal.getEndereco().getRua(), usuarioClonado.getEndereco().getRua());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/org/example/DescontoTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/example/DescontoTest.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class DescontoTest {&#10;    @Test&#10;    public void testCupomDesconto10() {&#10;        Desconto desconto = new CupomDesconto10();&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(90.0, valorComDesconto, 0.01);&#10;    }&#10;&#10;    @Test&#10;    public void testCupomDesconto15() {&#10;        Desconto desconto = new CupomDesconto15();&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(85.0, valorComDesconto, 0.01);&#10;    }&#10;&#10;    @Test&#10;    public void testCupomDesconto20() {&#10;        Desconto desconto = new CupomDesconto20();&#10;        double valor = 100.0;&#10;        double valorComDesconto = desconto.aplicarDesconto(valor);&#10;        assertEquals(80.0, valorComDesconto, 0.01);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/org/example/UsuarioTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/example/UsuarioTest.java" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class UsuarioTest {&#10;    @Test&#10;    public void testCloneSuccess() {&#10;        Endereco endereco = new Endereco(&quot;Rua A&quot;, &quot;123&quot;, &quot;CidadeX&quot;, &quot;EstadoY&quot;, &quot;00000-000&quot;);&#10;        Usuario usuarioOriginal = new Usuario(&quot;João&quot;, endereco);&#10;        Usuario usuarioClonado = usuarioOriginal.clone();&#10;&#10;        assertNotSame(usuarioOriginal, usuarioClonado);&#10;        assertEquals(usuarioOriginal.getNome(), usuarioClonado.getNome());&#10;        assertNotSame(usuarioOriginal.getEndereco(), usuarioClonado.getEndereco());&#10;        assertEquals(usuarioOriginal.getEndereco().getRua(), usuarioClonado.getEndereco().getRua());&#10;    }&#10;&#10;    @Test&#10;    public void testCloneInvalidoException() {&#10;        Endereco endereco = new Endereco(&quot;Rua B&quot;, &quot;456&quot;, &quot;CidadeY&quot;, &quot;EstadoZ&quot;, &quot;11111-111&quot;);&#10;        Usuario usuarioOriginal = new Usuario(&quot;Maria&quot;, endereco);&#10;        Usuario usuarioClonado = usuarioOriginal.clone();&#10;        usuarioClonado.setNome(&quot;Nome Diferente&quot;);&#10;        if (!usuarioOriginal.getNome().equals(usuarioClonado.getNome())) {&#10;            throw new Usuario.CloneInvalidoException(&quot;Nome do clone difere do original&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>